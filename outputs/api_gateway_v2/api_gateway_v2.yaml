openapi: 3.0.0
servers: []
info:
  title: ApiGatewayV2
  description: AWS CloudFormation Resource Specification
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  version: 2023-03-08-stackql-generated
components:
  schemas:
    Api:
      type: object
      properties:
        ApiKeySelectionExpression:
          type: string
          description: >-
            An API key selection expression\. Supported only for WebSocket
            APIs\. See [API Key Selection
            Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions)\.
        BasePath:
          type: string
          description: >-
            Specifies how to interpret the base path of the API during import\.
            Valid values are `ignore`, `prepend`, and `split`\. The default
            value is `ignore`\. To learn more, see [Set the OpenAPI basePath
            Property](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html)\.
            Supported only for HTTP APIs\.
        Body:
          type: object
          description: >-
            The OpenAPI definition\. Supported only for HTTP APIs\. To import an
            HTTP API, you must specify a `Body` or `BodyS3Location`\. If you
            specify a `Body` or `BodyS3Location`, don't specify CloudFormation
            resources such as `AWS::ApiGatewayV2::Authorizer` or
            `AWS::ApiGatewayV2::Route`\. API Gateway doesn't support the
            combination of OpenAPI and CloudFormation resources\.
        BodyS3Location:
          type: '[bodys3location](aws-properties-apigatewayv2-api-bodys3location.md)'
          description: >-
            The S3 location of an OpenAPI definition\. Supported only for HTTP
            APIs\. To import an HTTP API, you must specify a `Body` or
            `BodyS3Location`\. If you specify a `Body` or `BodyS3Location`,
            don't specify CloudFormation resources such as
            `AWS::ApiGatewayV2::Authorizer` or `AWS::ApiGatewayV2::Route`\. API
            Gateway doesn't support the combination of OpenAPI and
            CloudFormation resources\.
        CorsConfiguration:
          type: '[cors](aws-properties-apigatewayv2-api-cors.md)'
          description: >-
            A CORS configuration\. Supported only for HTTP APIs\. See
            [Configuring
            CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html)
            for more information\.
        CredentialsArn:
          type: string
          description: >-
            This property is part of quick create\. It specifies the credentials
            required for the integration, if any\. For a Lambda integration,
            three options are available\. To specify an IAM Role for API Gateway
            to assume, use the role's Amazon Resource Name \(ARN\)\. To require
            that the caller's identity be passed through from the request,
            specify `arn:aws:iam::*:user/*`\. To use resource\-based permissions
            on supported AWS services, specify `null`\. Currently, this property
            is not used for HTTP integrations\. Supported only for HTTP APIs\.
        Description:
          type: string
          description: The description of the API\.
        DisableExecuteApiEndpoint:
          type: boolean
          description: >-
            Specifies whether clients can invoke your API by using the default
            `execute-api` endpoint\. By default, clients can invoke your API
            with the default
            https://\{api\_id\}\.execute\-api\.\{region\}\.amazonaws\.com
            endpoint\. To require that clients use a custom domain name to
            invoke your API, disable the default endpoint\.
        DisableSchemaValidation:
          type: boolean
          description: >-
            Avoid validating models when creating a deployment\. Supported only
            for WebSocket APIs\.
        FailOnWarnings:
          type: boolean
          description: >-
            Specifies whether to rollback the API creation when a warning is
            encountered\. By default, API creation continues if a warning is
            encountered\.
        Name:
          type: string
          description: >-
            The name of the API\. Required unless you specify an OpenAPI
            definition for `Body` or `S3BodyLocation`\.
        ProtocolType:
          type: string
          description: >-
            The API protocol\. Valid values are `WEBSOCKET` or `HTTP`\. Required
            unless you specify an OpenAPI definition for `Body` or
            `S3BodyLocation`\.
        RouteKey:
          type: string
          description: >-
            This property is part of quick create\. If you don't specify a
            `routeKey`, a default route of `$default` is created\. The
            `$default` route acts as a catch\-all for any request made to your
            API, for a particular stage\. The `$default` route key can't be
            modified\. You can add routes after creating the API, and you can
            update the route keys of additional routes\. Supported only for HTTP
            APIs\.
        RouteSelectionExpression:
          type: string
          description: >-
            The route selection expression for the API\. For HTTP APIs, the
            `routeSelectionExpression` must be `${request.method}
            ${request.path}`\. If not provided, this will be the default for
            HTTP APIs\. This property is required for WebSocket APIs\.
        Tags:
          type: map of string
          description: >-
            The collection of tags\. Each tag element is associated with a given
            resource\.
        Target:
          type: string
          description: >-
            This property is part of quick create\. Quick create produces an API
            with an integration, a default catch\-all route, and a default stage
            which is configured to automatically deploy changes\. For HTTP
            integrations, specify a fully qualified URL\. For Lambda
            integrations, specify a function ARN\. The type of the integration
            will be HTTP\_PROXY or AWS\_PROXY, respectively\. Supported only for
            HTTP APIs\.
        Version:
          type: string
          description: A version identifier for the API\.
    ApiGatewayManagedOverrides:
      type: object
      properties:
        ApiId:
          type: string
          description: >-
            The ID of the API for which to override the configuration of API
            Gateway\-managed resources\.
        Integration:
          type: >-
            [integrationoverrides](aws-properties-apigatewayv2-apigatewaymanagedoverrides-integrationoverrides.md)
          description: >-
            Overrides the integration configuration for an API Gateway\-managed
            integration\.
        Route:
          type: >-
            [routeoverrides](aws-properties-apigatewayv2-apigatewaymanagedoverrides-routeoverrides.md)
          description: >-
            Overrides the route configuration for an API Gateway\-managed
            route\.
        Stage:
          type: >-
            [stageoverrides](aws-properties-apigatewayv2-apigatewaymanagedoverrides-stageoverrides.md)
          description: >-
            Overrides the stage configuration for an API Gateway\-managed
            stage\.
      required:
        - ApiId
    ApiMapping:
      type: object
      properties:
        ApiId:
          type: string
          description: The identifier of the API\.
        ApiMappingKey:
          type: string
          description: The API mapping key\.
        DomainName:
          type: string
          description: The domain name\.
        Stage:
          type: string
          description: The API stage\.
      required:
        - ApiId
        - DomainName
        - Stage
    Authorizer:
      type: object
      properties:
        ApiId:
          type: string
          description: The API identifier\.
        AuthorizerCredentialsArn:
          type: string
          description: >-
            Specifies the required credentials as an IAM role for API Gateway to
            invoke the authorizer\. To specify an IAM role for API Gateway to
            assume, use the role's Amazon Resource Name \(ARN\)\. To use
            resource\-based permissions on the Lambda function, specify null\.
            Supported only for `REQUEST` authorizers\.
        AuthorizerPayloadFormatVersion:
          type: string
          description: >-
            Specifies the format of the payload sent to an HTTP API Lambda
            authorizer\. Required for HTTP API Lambda authorizers\. Supported
            values are `1.0` and `2.0`\. To learn more, see [Working with AWS
            Lambda authorizers for HTTP
            APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html)\.
        AuthorizerResultTtlInSeconds:
          type: integer
          description: >-
            The time to live \(TTL\) for cached authorizer results, in seconds\.
            If it equals 0, authorization caching is disabled\. If it is greater
            than 0, API Gateway caches authorizer responses\. The maximum value
            is 3600, or 1 hour\. Supported only for HTTP API Lambda
            authorizers\.
        AuthorizerType:
          type: string
          description: >-
            The authorizer type\. Specify `REQUEST` for a Lambda function using
            incoming request parameters\. Specify `JWT` to use JSON Web Tokens
            \(supported only for HTTP APIs\)\.
        AuthorizerUri:
          type: string
          description: >-
            The authorizer's Uniform Resource Identifier \(URI\)\. For `REQUEST`
            authorizers, this must be a well\-formed Lambda function URI, for
            example,
            `arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations`\.
            In general, the URI has this form:
            `arn:aws:apigateway:{region}:lambda:path/{service_api} `, where
            *\{region\}* is the same as the region hosting the Lambda function,
            path indicates that the remaining substring in the URI should be
            treated as the path to the resource, including the initial `/`\. For
            Lambda functions, this is usually of the form
            `/2015-03-31/functions/[FunctionARN]/invocations`\.
        EnableSimpleResponses:
          type: boolean
          description: >-
            Specifies whether a Lambda authorizer returns a response in a simple
            format\. By default, a Lambda authorizer must return an IAM policy\.
            If enabled, the Lambda authorizer can return a boolean value instead
            of an IAM policy\. Supported only for HTTP APIs\. To learn more, see
            [Working with AWS Lambda authorizers for HTTP
            APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html)\.
        IdentitySource:
          type: array
          description: >-
            The identity source for which authorization is requested\.   For a
            `REQUEST` authorizer, this is optional\. The value is a set of one
            or more mapping expressions of the specified request parameters\.
            The identity source can be headers, query string parameters, stage
            variables, and context parameters\. For example, if an Auth header
            and a Name query string parameter are defined as identity sources,
            this value is route\.request\.header\.Auth,
            route\.request\.querystring\.Name for WebSocket APIs\. For HTTP
            APIs, use selection expressions prefixed with `$`, for example,
            `$request.header.Auth`, `$request.querystring.Name`\. These
            parameters are used to perform runtime validation for Lambda\-based
            authorizers by verifying all of the identity\-related request
            parameters are present in the request, not null, and non\-empty\.
            Only when this is true does the authorizer invoke the authorizer
            Lambda function\. Otherwise, it returns a 401 Unauthorized response
            without calling the Lambda function\. For HTTP APIs, identity
            sources are also used as the cache key when caching is enabled\. To
            learn more, see [Working with AWS Lambda authorizers for HTTP
            APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html)\.  
            For `JWT`, a single entry that specifies where to extract the JSON
            Web Token \(JWT\) from inbound requests\. Currently only
            header\-based and query parameter\-based selections are supported,
            for example `$request.header.Authorization`\.
        IdentityValidationExpression:
          type: string
          description: This parameter is not used\.
        JwtConfiguration:
          type: >-
            [jwtconfiguration](aws-properties-apigatewayv2-authorizer-jwtconfiguration.md)
          description: >-
            The `JWTConfiguration` property specifies the configuration of a JWT
            authorizer\. Required for the `JWT` authorizer type\. Supported only
            for HTTP APIs\.
        Name:
          type: string
          description: The name of the authorizer\.
      required:
        - ApiId
        - AuthorizerType
        - Name
    Deployment:
      type: object
      properties:
        ApiId:
          type: string
          description: The API identifier\.
        Description:
          type: string
          description: The description for the deployment resource\.
        StageName:
          type: string
          description: The name of an existing stage to associate with the deployment\.
      required:
        - ApiId
    DomainName:
      type: object
      properties:
        DomainName:
          type: string
          description: >-
            The custom domain name for your API in Amazon API Gateway\.
            Uppercase letters are not supported\.
        DomainNameConfigurations:
          type: >-
            list of
            [domainnameconfiguration](aws-properties-apigatewayv2-domainname-domainnameconfiguration.md)
          description: The domain name configurations\.
        MutualTlsAuthentication:
          type: >-
            [mutualtlsauthentication](aws-properties-apigatewayv2-domainname-mutualtlsauthentication.md)
          description: >-
            The mutual TLS authentication configuration for a custom domain
            name\.
        Tags:
          type: object
          description: The collection of tags associated with a domain name\.
      required:
        - DomainName
    Integration:
      type: object
      properties:
        ApiId:
          type: string
          description: The API identifier\.
        ConnectionId:
          type: string
          description: >-
            The ID of the VPC link for a private integration\. Supported only
            for HTTP APIs\.
        ConnectionType:
          type: string
          description: >-
            The type of the network connection to the integration endpoint\.
            Specify `INTERNET` for connections through the public routable
            internet or `VPC_LINK` for private connections between API Gateway
            and resources in a VPC\. The default value is `INTERNET`\.
        ContentHandlingStrategy:
          type: string
          description: >-
            Supported only for WebSocket APIs\. Specifies how to handle response
            payload content type conversions\. Supported values are
            `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`, with the following
            behaviors:    `CONVERT_TO_BINARY`: Converts a response payload from
            a Base64\-encoded string to the corresponding binary blob\.   
            `CONVERT_TO_TEXT`: Converts a response payload from a binary blob to
            a Base64\-encoded string\.   If this property is not defined, the
            response payload will be passed through from the integration
            response to the route response or method response without
            modification\.
        CredentialsArn:
          type: string
          description: >-
            Specifies the credentials required for the integration, if any\. For
            AWS integrations, three options are available\. To specify an IAM
            Role for API Gateway to assume, use the role's Amazon Resource Name
            \(ARN\)\. To require that the caller's identity be passed through
            from the request, specify the string `arn:aws:iam::*:user/*`\. To
            use resource\-based permissions on supported AWS services, don't
            specify this parameter\.
        Description:
          type: string
          description: The description of the integration\.
        IntegrationMethod:
          type: string
          description: Specifies the integration's HTTP method type\.
        IntegrationSubtype:
          type: string
          description: >-
            Supported only for HTTP API `AWS_PROXY` integrations\. Specifies the
            AWS service action to invoke\. To learn more, see [Integration
            subtype
            reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html)\.
        IntegrationType:
          type: string
          description: >-
            The integration type of an integration\. One of the following:   
            `AWS`: for integrating the route or method request with an AWS
            service action, including the Lambda function\-invoking action\.
            With the Lambda function\-invoking action, this is referred to as
            the Lambda custom integration\. With any other AWS service action,
            this is known as AWS integration\. Supported only for WebSocket
            APIs\.    `AWS_PROXY`: for integrating the route or method request
            with a Lambda function or other AWS service action\. This
            integration is also referred to as a Lambda proxy integration\.   
            `HTTP`: for integrating the route or method request with an HTTP
            endpoint\. This integration is also referred to as the HTTP custom
            integration\. Supported only for WebSocket APIs\.    `HTTP_PROXY`:
            for integrating the route or method request with an HTTP endpoint,
            with the client request passed through as\-is\. This is also
            referred to as HTTP proxy integration\. For HTTP API private
            integrations, use an `HTTP_PROXY` integration\.    `MOCK`: for
            integrating the route or method request with API Gateway as a
            "loopback" endpoint without invoking any backend\. Supported only
            for WebSocket APIs\.
        IntegrationUri:
          type: string
          description: >-
            For a Lambda integration, specify the URI of a Lambda function\.  
            For an HTTP integration, specify a fully\-qualified URL\.   For an
            HTTP API private integration, specify the ARN of an Application Load
            Balancer listener, Network Load Balancer listener, or AWS Cloud Map
            service\. If you specify the ARN of an AWS Cloud Map service, API
            Gateway uses `DiscoverInstances` to identify resources\. You can use
            query parameters to target specific resources\. To learn more, see
            [DiscoverInstances](https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html)\.
            For private integrations, all resources must be owned by the same
            AWS account\.
        PassthroughBehavior:
          type: string
          description: >-
            Specifies the pass\-through behavior for incoming requests based on
            the `Content-Type` header in the request, and the available mapping
            templates specified as the `requestTemplates` property on the
            `Integration` resource\. There are three valid values:
            `WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, and `NEVER`\. Supported only
            for WebSocket APIs\.    `WHEN_NO_MATCH` passes the request body for
            unmapped content types through to the integration backend without
            transformation\.    `NEVER` rejects unmapped content types with an
            `HTTP 415 Unsupported Media Type` response\.    `WHEN_NO_TEMPLATES`
            allows pass\-through when the integration has no content types
            mapped to templates\. However, if there is at least one content type
            defined, unmapped content types will be rejected with the same `HTTP
            415 Unsupported Media Type` response\.
        PayloadFormatVersion:
          type: string
          description: >-
            Specifies the format of the payload sent to an integration\.
            Required for HTTP APIs\. For HTTP APIs, supported values for Lambda
            proxy integrations are `1.0` and `2.0`\. For all other integrations,
            `1.0` is the only supported value\. To learn more, see [Working with
            AWS Lambda proxy integrations for HTTP
            APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html)\.
        RequestParameters:
          type: object
          description: >-
            For WebSocket APIs, a key\-value map specifying request parameters
            that are passed from the method request to the backend\. The key is
            an integration request parameter name and the associated value is a
            method request parameter value or static value that must be enclosed
            within single quotes and pre\-encoded as required by the backend\.
            The method request parameter value must match the pattern of
            `method.request.{location}.{name} `, where ` {location} ` is
            `querystring`, `path`, or `header`; and ` {name} ` must be a valid
            and unique method request parameter name\.   For HTTP API
            integrations with a specified `integrationSubtype`, request
            parameters are a key\-value map specifying parameters that are
            passed to `AWS_PROXY` integrations\. You can provide static values,
            or map request data, stage variables, or context variables that are
            evaluated at runtime\. To learn more, see [Working with AWS service
            integrations for HTTP
            APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html)\.  
            For HTTP API integrations without a specified `integrationSubtype`
            request parameters are a key\-value map specifying how to transform
            HTTP requests before sending them to the backend\. The key should
            follow the pattern <action>:<header\|querystring\|path>\.<location>
            where action can be `append`, `overwrite` or` remove`\. For values,
            you can provide static values, or map request data, stage variables,
            or context variables that are evaluated at runtime\. To learn more,
            see [Transforming API requests and
            responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html)\.
        RequestTemplates:
          type: object
          description: >-
            Represents a map of Velocity templates that are applied on the
            request payload based on the value of the Content\-Type header sent
            by the client\. The content type value is the key in this map, and
            the template \(as a String\) is the value\. Supported only for
            WebSocket APIs\.
        ResponseParameters:
          type: object
          description: >-
            Supported only for HTTP APIs\. You use response parameters to
            transform the HTTP response from a backend integration before
            returning the response to clients\. Specify a key\-value map from a
            selection key to response parameters\. The selection key must be a
            valid HTTP status code within the range of 200\-599\. The value is
            of type
            [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigatewayv2-integration-responseparameterlist.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigatewayv2-integration-responseparameterlist.html)\.
            To learn more, see [Transforming API requests and
            responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html)\.
        TemplateSelectionExpression:
          type: string
          description: >-
            The template selection expression for the integration\. Supported
            only for WebSocket APIs\.
        TimeoutInMillis:
          type: integer
          description: >-
            Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs
            and between 50 and 30,000 milliseconds for HTTP APIs\. The default
            timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP
            APIs\.
        TlsConfig:
          type: '[tlsconfig](aws-properties-apigatewayv2-integration-tlsconfig.md)'
          description: >-
            The TLS configuration for a private integration\. If you specify a
            TLS configuration, private integration traffic uses the HTTPS
            protocol\. Supported only for HTTP APIs\.
      required:
        - ApiId
        - IntegrationType
    IntegrationResponse:
      type: object
      properties:
        ApiId:
          type: string
          description: The API identifier\.
        ContentHandlingStrategy:
          type: string
          description: >-
            Supported only for WebSocket APIs\. Specifies how to handle response
            payload content type conversions\. Supported values are
            `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`, with the following
            behaviors:    `CONVERT_TO_BINARY`: Converts a response payload from
            a Base64\-encoded string to the corresponding binary blob\.   
            `CONVERT_TO_TEXT`: Converts a response payload from a binary blob to
            a Base64\-encoded string\.   If this property is not defined, the
            response payload will be passed through from the integration
            response to the route response or method response without
            modification\.
        IntegrationId:
          type: string
          description: The integration ID\.
        IntegrationResponseKey:
          type: string
          description: The integration response key\.
        ResponseParameters:
          type: object
          description: >-
            A key\-value map specifying response parameters that are passed to
            the method response from the backend\. The key is a method response
            header parameter name and the mapped value is an integration
            response header value, a static value enclosed within a pair of
            single quotes, or a JSON expression from the integration response
            body\. The mapping key must match the pattern of
            `method.response.header.{name} `, where name is a valid and unique
            header name\. The mapped non\-static value must match the pattern of
            `integration.response.header.{name} ` or
            `integration.response.body.{JSON-expression} `, where ` {name} ` is
            a valid and unique response header name and ` {JSON-expression} ` is
            a valid JSON expression without the `$` prefix\.
        ResponseTemplates:
          type: object
          description: >-
            The collection of response templates for the integration response as
            a string\-to\-string map of key\-value pairs\. Response templates
            are represented as a key/value map, with a content\-type as the key
            and a template as the value\.
        TemplateSelectionExpression:
          type: string
          description: >-
            The template selection expression for the integration response\.
            Supported only for WebSocket APIs\.
      required:
        - ApiId
        - IntegrationId
        - IntegrationResponseKey
    Model:
      type: object
      properties:
        ApiId:
          type: string
          description: The API identifier\.
        ContentType:
          type: string
          description: The content\-type for the model, for example, "application/json"\.
        Description:
          type: string
          description: The description of the model\.
        Name:
          type: string
          description: The name of the model\.
        Schema:
          type: object
          description: >-
            The schema for the model\. For application/json models, this should
            be JSON schema draft 4 model\.
      required:
        - ApiId
        - Name
        - Schema
    Route:
      type: object
      properties:
        ApiId:
          type: string
          description: The API identifier\.
        ApiKeyRequired:
          type: boolean
          description: >-
            Specifies whether an API key is required for the route\. Supported
            only for WebSocket APIs\.
        AuthorizationScopes:
          type: array
          description: The authorization scopes supported by this route\.
        AuthorizationType:
          type: string
          description: >-
            The authorization type for the route\. For WebSocket APIs, valid
            values are `NONE` for open access, `AWS_IAM` for using AWS IAM
            permissions, and `CUSTOM` for using a Lambda authorizer\. For HTTP
            APIs, valid values are `NONE` for open access, `JWT` for using JSON
            Web Tokens, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM`
            for using a Lambda authorizer\.
        AuthorizerId:
          type: string
          description: >-
            The identifier of the `Authorizer` resource to be associated with
            this route\. The authorizer identifier is generated by API Gateway
            when you created the authorizer\.
        ModelSelectionExpression:
          type: string
          description: >-
            The model selection expression for the route\. Supported only for
            WebSocket APIs\.
        OperationName:
          type: string
          description: The operation name for the route\.
        RequestModels:
          type: object
          description: >-
            The request models for the route\. Supported only for WebSocket
            APIs\.
        RequestParameters:
          type: object
          description: >-
            The request parameters for the route\. Supported only for WebSocket
            APIs\.
        RouteKey:
          type: string
          description: >-
            The route key for the route\. For HTTP APIs, the route key can be
            either `$default`, or a combination of an HTTP method and resource
            path, for example, `GET /pets`\.
        RouteResponseSelectionExpression:
          type: string
          description: >-
            The route response selection expression for the route\. Supported
            only for WebSocket APIs\.
        Target:
          type: string
          description: The target for the route\.
      required:
        - ApiId
        - RouteKey
    RouteResponse:
      type: object
      properties:
        ApiId:
          type: string
          description: The API identifier\.
        ModelSelectionExpression:
          type: string
          description: >-
            The model selection expression for the route response\. Supported
            only for WebSocket APIs\.
        ResponseModels:
          type: object
          description: The response models for the route response\.
        ResponseParameters:
          type: object
          description: The route response parameters\.
        RouteId:
          type: string
          description: The route ID\.
        RouteResponseKey:
          type: string
          description: The route response key\.
      required:
        - ApiId
        - RouteId
        - RouteResponseKey
    Stage:
      type: object
      properties:
        AccessLogSettings:
          type: >-
            [accesslogsettings](aws-properties-apigatewayv2-stage-accesslogsettings.md)
          description: Settings for logging access in this stage\.
        AccessPolicyId:
          type: string
          description: This parameter is not currently supported\.
        ApiId:
          type: string
          description: The API identifier\.
        AutoDeploy:
          type: boolean
          description: >-
            Specifies whether updates to an API automatically trigger a new
            deployment\. The default value is `false`\.
        ClientCertificateId:
          type: string
          description: >-
            The identifier of a client certificate for a `Stage`\. Supported
            only for WebSocket APIs\.
        DefaultRouteSettings:
          type: '[routesettings](aws-properties-apigatewayv2-stage-routesettings.md)'
          description: The default route settings for the stage\.
        DeploymentId:
          type: string
          description: >-
            The deployment identifier for the API stage\. Can't be updated if
            `autoDeploy` is enabled\.
        Description:
          type: string
          description: The description for the API stage\.
        RouteSettings:
          type: '[json](aws-properties-apigatewayv2-stage-routesettings.md)'
          description: Route settings for the stage\.
        StageName:
          type: string
          description: >-
            The stage name\. Stage names can contain only alphanumeric
            characters, hyphens, and underscores, or be `$default`\. Maximum
            length is 128 characters\.
        StageVariables:
          type: object
          description: >-
            A map that defines the stage variables for a `Stage`\. Variable
            names can have alphanumeric and underscore characters, and the
            values must match \[A\-Za\-z0\-9\-\.\_\~:/?\#&=,\]\+\.
        Tags:
          type: object
          description: >-
            The collection of tags\. Each tag element is associated with a given
            resource\.
      required:
        - ApiId
        - StageName
    VpcLink:
      type: object
      properties:
        Name:
          type: string
          description: The name of the VPC link\.
        SecurityGroupIds:
          type: array
          description: A list of security group IDs for the VPC link\.
        SubnetIds:
          type: array
          description: A list of subnet IDs to include in the VPC link\.
        Tags:
          type: map of string
          description: >-
            The collection of tags\. Each tag element is associated with a given
            resource\.
      required:
        - Name
        - SubnetIds
paths: {}
