openapi: 3.0.0
servers: []
info:
  title: KMS
  description: AWS CloudFormation Resource Specification
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  version: 2023-03-08-stackql-generated
components:
  schemas:
    Alias:
      type: object
      properties:
        AliasName:
          type: string
          description: >-
            Specifies the alias name\. This value must begin with `alias/`
            followed by a name, such as `alias/ExampleAlias`\.    If you change
            the value of the `AliasName` property, the existing alias is deleted
            and a new alias is created for the specified KMS key\. This change
            can disrupt applications that use the alias\. It can also allow or
            deny access to a KMS key affected by attribute\-based access control
            \(ABAC\)\. The alias must be string of 1\-256 characters\. It can
            contain only alphanumeric characters, forward slashes \(/\),
            underscores \(\_\), and dashes \(\-\)\. The alias name cannot begin
            with `alias/aws/`\. The `alias/aws/` prefix is reserved for [AWS
            managed
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk)\.
        TargetKeyId:
          type: string
          description: >-
            Associates the alias with the specified [customer managed
            key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk)\.
            The KMS key must be in the same AWS account and Region\.   A valid
            key ID is required\. If you supply a null or empty string value,
            this operation returns an error\.   For help finding the key ID and
            ARN, see [Finding the key ID and
            ARN](https://docs.aws.amazon.com/kms/latest/developerguide/viewing-keys.html#find-cmk-id-arn)
            in the *AWS Key Management Service Developer Guide*\.   Specify the
            key ID or the key ARN of the KMS key\.   For example:   + Key ID:
            `1234abcd-12ab-34cd-56ef-1234567890ab`  + Key ARN:
            `arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab` 
            To get the key ID and key ARN for a KMS key, use
            [ListKeys](https://docs.aws.amazon.com/kms/latest/APIReference/API_ListKeys.html)
            or
            [DescribeKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html)\.
      required:
        - AliasName
        - TargetKeyId
    Key:
      type: object
      properties:
        Description:
          type: string
          description: >-
            A description of the KMS key\. Use a description that helps you to
            distinguish this KMS key from others in the account, such as its
            intended use\.
        Enabled:
          type: boolean
          description: >-
            Specifies whether the KMS key is enabled\. Disabled KMS keys cannot
            be used in cryptographic operations\.   When `Enabled` is `true`,
            the *key state* of the KMS key is `Enabled`\. When `Enabled` is
            `false`, the key state of the KMS key is `Disabled`\. The default
            value is `true`\.   The actual key state of the KMS key might be
            affected by actions taken outside of CloudFormation, such as running
            the
            [EnableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_EnableKey.html),
            [DisableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_DisableKey.html),
            or
            [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html)
            operations\.   For information about the key states of a KMS key,
            see [Key state: Effect on your KMS
            key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html)
            in the *AWS Key Management Service Developer Guide*\.
        EnableKeyRotation:
          type: boolean
          description: >-
            Enables automatic rotation of the key material for the specified KMS
            key\. By default, automatic key rotation is not enabled\.   AWS KMS
            supports automatic rotation only for symmetric encryption KMS keys
            \(`KeySpec` = `SYMMETRIC_DEFAULT`\)\. For asymmetric KMS keys and
            HMAC KMS keys, omit the `EnableKeyRotation` property or set it to
            `false`\.   To enable automatic key rotation of the key material for
            a multi\-Region KMS key, set `EnableKeyRotation` to `true` on the
            primary key \(created by using `AWS::KMS::Key`\)\. AWS KMS copies
            the rotation status to all replica keys\. For details, see [Rotating
            multi\-Region
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-manage.html#multi-region-rotate)
            in the *AWS Key Management Service Developer Guide*\.   When you
            enable automatic rotation, AWS KMS automatically creates new key
            material for the KMS key one year after the enable date and every
            year thereafter\. AWS KMS retains all key material until you delete
            the KMS key\. For detailed information about automatic key rotation,
            see [Rotating KMS
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/rotate-keys.html)
            in the *AWS Key Management Service Developer Guide*\.
        KeyPolicy:
          type: object
          description: >-
            The key policy that authorizes use of the KMS key\. The key policy
            must conform to the following rules\.   + The key policy must allow
            the caller to make a subsequent
            [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html)
            request on the KMS key\. This reduces the risk that the KMS key
            becomes unmanageable\. For more information, refer to the scenario
            in the [Default key
            policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
            section of the * *AWS Key Management Service Developer Guide* *\. +
            Each statement in the key policy must contain one or more
            principals\. The principals in the key policy must exist and be
            visible to AWS KMS\. When you create a new AWS principal \(for
            example, an IAM user or role\), you might need to enforce a delay
            before including the new principal in a key policy because the new
            principal might not be immediately visible to AWS KMS\. For more
            information, see [Changes that I make are not always immediately
            visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency)
            in the *AWS Identity and Access Management User Guide*\. If you are
            unsure of which policy to use, consider the *default key policy*\.
            This is the key policy that AWS KMS applies to KMS keys that are
            created by using the CreateKey API with no specified key policy\. It
            gives the AWS account that owns the key permission to perform all
            operations on the key\. It also allows you write IAM policies to
            authorize access to the key\. For details, see [Default key
            policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default)
            in the *AWS Key Management Service Developer Guide*\.   A key policy
            document can include only the following characters:   + Printable
            ASCII characters + Printable characters in the Basic Latin and
            Latin\-1 Supplement character set + The tab \(`\u0009`\), line feed
            \(`\u000A`\), and carriage return \(`\u000D`\) special characters
        KeySpec:
          type: string
          description: >-
            Specifies the type of KMS key to create\. The default value,
            `SYMMETRIC_DEFAULT`, creates a KMS key with a 256\-bit symmetric key
            for encryption and decryption\. In China Regions,
            `SYMMETRIC_DEFAULT` creates a 128\-bit symmetric key that uses SM4
            encryption\. You can't change the `KeySpec` value after the KMS key
            is created\. For help choosing a key spec for your KMS key, see
            [Choosing a KMS key
            type](https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html)
            in the *AWS Key Management Service Developer Guide*\.   The
            `KeySpec` property determines the type of key material in the KMS
            key and the algorithms that the KMS key supports\. To further
            restrict the algorithms that can be used with the KMS key, use a
            condition key in its key policy or IAM policy\. For more
            information, see [AWS KMS condition
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms)
            in the *AWS Key Management Service Developer Guide*\.   If you
            change the value of the `KeySpec` property on an existing KMS key,
            the update request fails, regardless of the value of the
            [`UpdateReplacePolicy`
            attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html)\.
            This prevents you from accidentally deleting a KMS key by changing
            an immutable property value\. [AWS services that are integrated with
            AWS
            KMS](http://aws.amazon.com/kms/features/#AWS_Service_Integration)
            use symmetric encryption KMS keys to protect your data\. These
            services do not support encryption with asymmetric KMS keys\. For
            help determining whether a KMS key is asymmetric, see [Identifying
            asymmetric KMS
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html)
            in the *AWS Key Management Service Developer Guide*\.  AWS KMS
            supports the following key specs for KMS keys:   + Symmetric
            encryption key \(default\)   +  `SYMMETRIC_DEFAULT`
            \(AES\-256\-GCM\) + HMAC keys \(symmetric\)   +  `HMAC_224`    + 
            `HMAC_256`    +  `HMAC_384`    +  `HMAC_512`  + Asymmetric RSA key
            pairs   +  `RSA_2048`    +  `RSA_3072`    +  `RSA_4096`  +
            Asymmetric NIST\-recommended elliptic curve key pairs   + 
            `ECC_NIST_P256` \(secp256r1\)   +  `ECC_NIST_P384` \(secp384r1\)  
            +  `ECC_NIST_P521` \(secp521r1\) + Other asymmetric elliptic curve
            key pairs   +  `ECC_SECG_P256K1` \(secp256k1\), commonly used for
            cryptocurrencies\. + SM2 key pairs \(China Regions only\)   + `SM2`
        KeyUsage:
          type: string
          description: >-
            Determines the [cryptographic
            operations](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations)
            for which you can use the KMS key\. The default value is
            `ENCRYPT_DECRYPT`\. This property is required for asymmetric KMS
            keys and HMAC KMS keys\. You can't change the `KeyUsage` value after
            the KMS key is created\.   If you change the value of the `KeyUsage`
            property on an existing KMS key, the update request fails,
            regardless of the value of the [`UpdateReplacePolicy`
            attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html)\.
            This prevents you from accidentally deleting a KMS key by changing
            an immutable property value\. Select only one valid value\.   + For
            symmetric encryption KMS keys, omit the property or specify
            `ENCRYPT_DECRYPT`\. + For asymmetric KMS keys with RSA key material,
            specify `ENCRYPT_DECRYPT` or `SIGN_VERIFY`\. + For asymmetric KMS
            keys with ECC key material, specify `SIGN_VERIFY`\. + For asymmetric
            KMS keys with SM2 \(China Regions only\) key material, specify
            `ENCRYPT_DECRYPT` or `SIGN_VERIFY`\. + For HMAC KMS keys, specify
            `GENERATE_VERIFY_MAC`\.
        MultiRegion:
          type: boolean
          description: >-
            Creates a multi\-Region primary key that you can replicate in other
            AWS Regions\. You can't change the `MultiRegion` value after the KMS
            key is created\.   For a list of AWS Regions in which multi\-Region
            keys are supported, see [Multi\-Region keys in AWS
            KMS](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html)
            in the *AWS Key Management Service Developer Guide*\.   If you
            change the value of the `MultiRegion` property on an existing KMS
            key, the update request fails, regardless of the value of the
            [`UpdateReplacePolicy`
            attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html)\.
            This prevents you from accidentally deleting a KMS key by changing
            an immutable property value\. For a multi\-Region key, set to this
            property to `true`\. For a single\-Region key, omit this property or
            set it to `false`\. The default value is `false`\.   *Multi\-Region
            keys* are an AWS KMS feature that lets you create multiple
            interoperable KMS keys in different AWS Regions\. Because these KMS
            keys have the same key ID, key material, and other metadata, you can
            use them to encrypt data in one AWS Region and decrypt it in a
            different AWS Region without making a cross\-Region call or exposing
            the plaintext data\. For more information, see [Multi\-Region
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html)
            in the *AWS Key Management Service Developer Guide*\.   You can
            create a symmetric encryption, HMAC, or asymmetric multi\-Region KMS
            key, and you can create a multi\-Region key with imported key
            material\. However, you cannot create a multi\-Region key in a
            custom key store\.   To create a replica of this primary key in a
            different AWS Region , create an
            [AWS::KMS::ReplicaKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-replicakey.html)
            resource in a CloudFormation stack in the replica Region\. Specify
            the key ARN of this primary key\.
        PendingWindowInDays:
          type: integer
          description: >-
            Specifies the number of days in the waiting period before AWS KMS
            deletes a KMS key that has been removed from a CloudFormation
            stack\. Enter a value between 7 and 30 days\. The default value is
            30 days\.   When you remove a KMS key from a CloudFormation stack,
            AWS KMS schedules the KMS key for deletion and starts the mandatory
            waiting period\. The `PendingWindowInDays` property determines the
            length of waiting period\. During the waiting period, the key state
            of KMS key is `Pending Deletion` or `Pending Replica Deletion`,
            which prevents the KMS key from being used in cryptographic
            operations\. When the waiting period expires, AWS KMS permanently
            deletes the KMS key\.   AWS KMS will not delete a [multi\-Region
            primary
            key](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html)
            that has replica keys\. If you remove a multi\-Region primary key
            from a CloudFormation stack, its key state changes to
            `PendingReplicaDeletion` so it cannot be replicated or used in
            cryptographic operations\. This state can persist indefinitely\.
            When the last of its replica keys is deleted, the key state of the
            primary key changes to `PendingDeletion` and the waiting period
            specified by `PendingWindowInDays` begins\. When this waiting period
            expires, AWS KMS deletes the primary key\. For details, see
            [Deleting multi\-Region
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html)
            in the *AWS Key Management Service Developer Guide*\.   You cannot
            use a CloudFormation template to cancel deletion of the KMS key
            after you remove it from the stack, regardless of the waiting
            period\. If you specify a KMS key in your template, even one with
            the same name, CloudFormation creates a new KMS key\. To cancel
            deletion of a KMS key, use the AWS KMS console or the
            [CancelKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_CancelKeyDeletion.html)
            operation\.   For information about the `Pending Deletion` and
            `Pending Replica Deletion` key states, see [Key state: Effect on
            your KMS
            key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html)
            in the *AWS Key Management Service Developer Guide*\. For more
            information about deleting KMS keys, see the
            [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html)
            operation in the *AWS Key Management Service API Reference* and
            [Deleting KMS
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html)
            in the *AWS Key Management Service Developer Guide*\.
        Tags:
          type: >-
            list of
            [tag](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-properties-resource-tags.html)
          description: >-
            Assigns one or more tags to the replica key\.   Tagging or untagging
            a KMS key can allow or deny permission to the KMS key\. For details,
            see [ABAC for AWS
            KMS](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html)
            in the *AWS Key Management Service Developer Guide*\. For
            information about tags in AWS KMS, see [Tagging
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html)
            in the *AWS Key Management Service Developer Guide*\. For
            information about tags in CloudFormation, see
            [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html)\.
      required:
        - KeyPolicy
    ReplicaKey:
      type: object
      properties:
        Description:
          type: string
          description: >-
            A description of the KMS key\.    The default value is an empty
            string \(no description\)\.   The description is not a shared
            property of multi\-Region keys\. You can specify the same
            description or a different description for each key in a set of
            related multi\-Region keys\. AWS Key Management Service does not
            synchronize this property\.
        Enabled:
          type: boolean
          description: >-
            Specifies whether the replica key is enabled\. Disabled KMS keys
            cannot be used in cryptographic operations\.   When `Enabled` is
            `true`, the *key state* of the KMS key is `Enabled`\. When `Enabled`
            is `false`, the key state of the KMS key is `Disabled`\. The default
            value is `true`\.   The actual key state of the replica might be
            affected by actions taken outside of CloudFormation, such as running
            the
            [EnableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_EnableKey.html),
            [DisableKey](https://docs.aws.amazon.com/kms/latest/APIReference/API_DisableKey.html),
            or
            [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html)
            operations\. Also, while the replica key is being created, its key
            state is `Creating`\. When the process is complete, the key state of
            the replica key changes to `Enabled`\.    For information about the
            key states of a KMS key, see [Key state: Effect on your KMS
            key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html)
            in the *AWS Key Management Service Developer Guide*\.
        KeyPolicy:
          type: object
          description: >-
            The key policy that authorizes use of the replica key\.   The key
            policy is not a shared property of multi\-Region keys\. You can
            specify the same key policy or a different key policy for each key
            in a set of related multi\-Region keys\. AWS KMS does not
            synchronize this property\.   The key policy must conform to the
            following rules\.   + The key policy must give the caller
            [PutKeyPolicy](https://docs.aws.amazon.com/kms/latest/APIReference/API_PutKeyPolicy.html)
            permission on the KMS key\. This reduces the risk that the KMS key
            becomes unmanageable\. For more information, refer to the scenario
            in the [Default key
            policy](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
            section of the * *AWS Key Management Service Developer Guide* *\. +
            Each statement in the key policy must contain one or more
            principals\. The principals in the key policy must exist and be
            visible to AWS KMS\. When you create a new AWSprincipal \(for
            example, an IAM user or role\), you might need to enforce a delay
            before including the new principal in a key policy because the new
            principal might not be immediately visible to AWS KMS\. For more
            information, see [Changes that I make are not always immediately
            visible](https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency)
            in the *AWS Identity and Access Management User Guide*\. A key
            policy document can include only the following characters:   +
            Printable ASCII characters from the space character \(`\u0020`\)
            through the end of the ASCII character range\. + Printable
            characters in the Basic Latin and Latin\-1 Supplement character set
            \(through `\u00FF`\)\. + The tab \(`\u0009`\), line feed
            \(`\u000A`\), and carriage return \(`\u000D`\) special characters
        PendingWindowInDays:
          type: integer
          description: >-
            Specifies the number of days in the waiting period before AWS KMS
            deletes a replica key that has been removed from a CloudFormation
            stack\. Enter a value between 7 and 30 days\. The default value is
            30 days\.   When you remove a replica key from a CloudFormation
            stack, AWS KMS schedules the replica key for deletion and starts the
            mandatory waiting period\. The `PendingWindowInDays` property
            determines the length of waiting period\. During the waiting period,
            the key state of replica key is `Pending Deletion`, which prevents
            it from being used in cryptographic operations\. When the waiting
            period expires, AWS KMS permanently deletes the replica key\.   If
            the KMS key is a multi\-Region primary key with replica keys, the
            waiting period begins when the last of its replica keys is deleted\.
            Otherwise, the waiting period begins immediately\.   You cannot use
            a CloudFormation template to cancel deletion of the replica after
            you remove it from the stack, regardless of the waiting period\.
            However, if you specify a replica key in your template that is based
            on the same primary key as the original replica key, CloudFormation
            creates a new replica key with the same key ID, key material, and
            other shared properties of the original replica key\. This new
            replica key can decrypt ciphertext that was encrypted under the
            original replica key, or any related multi\-Region key\.   For
            detailed information about deleting multi\-Region keys, see
            [Deleting multi\-Region
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html)
            in the *AWS Key Management Service Developer Guide*\.   For
            information about the `PendingDeletion` key state, see [Key state:
            Effect on your KMS
            key](https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html)
            in the *AWS Key Management Service Developer Guide*\. For more
            information about deleting KMS keys, see the
            [ScheduleKeyDeletion](https://docs.aws.amazon.com/kms/latest/APIReference/API_ScheduleKeyDeletion.html)
            operation in the *AWS Key Management Service API Reference* and
            [Deleting KMS
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/deleting-keys.html)
            in the *AWS Key Management Service Developer Guide*\.
        PrimaryKeyArn:
          type: string
          description: >-
            Specifies the multi\-Region primary key to replicate\. The primary
            key must be in a different AWS Region of the same AWS partition\.
            You can create only one replica of a given primary key in each AWS
            Region \.   If you change the `PrimaryKeyArn` value of a replica
            key, the existing replica key is scheduled for deletion and a new
            replica key is created based on the specified primary key\. While it
            is scheduled for deletion, the existing replica key becomes
            unusable\. You can cancel the scheduled deletion of the key outside
            of CloudFormation\.   However, if you inadvertently delete a replica
            key, you can decrypt ciphertext encrypted by that replica key by
            using any related multi\-Region key\. If necessary, you can recreate
            the replica in the same Region after the previous one is completely
            deleted\. For details, see [Deleting multi\-Region
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-delete.html)
            in the *AWS Key Management Service Developer Guide* Specify the key
            ARN of an existing multi\-Region primary key\. For example,
            `arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab`\.
        Tags:
          type: >-
            list of
            [tag](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-properties-resource-tags.html)
          description: >-
            Assigns one or more tags to the replica key\.   Tagging or untagging
            a KMS key can allow or deny permission to the KMS key\. For details,
            see [ABAC for AWS
            KMS](https://docs.aws.amazon.com/kms/latest/developerguide/abac.html)
            in the *AWS Key Management Service Developer Guide*\. Tags are not a
            shared property of multi\-Region keys\. You can specify the same
            tags or different tags for each key in a set of related
            multi\-Region keys\. AWS KMS does not synchronize this property\.  
            Each tag consists of a tag key and a tag value\. Both the tag key
            and the tag value are required, but the tag value can be an empty
            \(null\) string\. You cannot have more than one tag on a KMS key
            with the same tag key\. If you specify an existing tag key with a
            different tag value, AWS KMS replaces the current tag value with the
            specified one\.   When you assign tags to an AWSresource,
            AWSgenerates a cost allocation report with usage and costs
            aggregated by tags\. Tags can also be used to control access to a
            KMS key\. For details, see [Tagging
            keys](https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html)\.
      required:
        - KeyPolicy
        - PrimaryKeyArn
paths: {}
