openapi: 3.0.0
servers: []
info:
  title: MediaStore
  description: AWS CloudFormation Resource Specification
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  version: 2023-03-08-stackql-generated
components:
  schemas:
    Container:
      type: object
      properties:
        AccessLoggingEnabled:
          type: boolean
          description: >-
            The state of access logging on the container\. This value is `false`
            by default, indicating that AWS Elemental MediaStore does not send
            access logs to Amazon CloudWatch Logs\. When you enable access
            logging on the container, MediaStore changes this value to `true`,
            indicating that the service delivers access logs for objects stored
            in that container to CloudWatch Logs\.
        ContainerName:
          type: string
          description: >-
            The name for the container\. The name must be from 1 to 255
            characters\. Container names must be unique to your AWS account
            within a specific region\. As an example, you could create a
            container named `movies` in every region, as long as you donâ€™t have
            an existing container with that name\.
        CorsPolicy:
          type: list of [corsrule](aws-properties-mediastore-container-corsrule.md)
          description: >-
            Sets the cross\-origin resource sharing \(CORS\) configuration on a
            container so that the container can service cross\-origin requests\.
            For example, you might want to enable a request whose origin is
            http://www\.example\.com to access your AWS Elemental MediaStore
            container at my\.example\.container\.com by using the browser's
            XMLHttpRequest capability\.   To enable CORS on a container, you
            attach a CORS policy to the container\. In the CORS policy, you
            configure rules that identify origins and the HTTP methods that can
            be executed on your container\. The policy can contain up to 398,000
            characters\. You can add up to 100 rules to a CORS policy\. If more
            than one rule applies, the service uses the first applicable rule
            listed\.   To learn more about CORS, see [Cross\-Origin Resource
            Sharing \(CORS\) in AWS Elemental
            MediaStore](https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html)\.
        LifecyclePolicy:
          type: string
          description: >-
            Writes an object lifecycle policy to a container\. If the container
            already has an object lifecycle policy, the service replaces the
            existing policy with the new policy\. It takes up to 20 minutes for
            the change to take effect\.   For information about how to construct
            an object lifecycle policy, see [Components of an Object Lifecycle
            Policy](https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html)\.
        MetricPolicy:
          type: '[metricpolicy](aws-properties-mediastore-container-metricpolicy.md)'
          description: Property description not available\.
        Policy:
          type: string
          description: >-
            Creates an access policy for the specified container to restrict the
            users and clients that can access it\. For information about the
            data that is included in an access policy, see the [AWS Identity and
            Access Management User Guide](https://docs.aws.amazon.com/iam/)\.  
            For this release of the REST API, you can create only one policy for
            a container\. If you enter `PutContainerPolicy` twice, the second
            command modifies the existing policy\.
        Tags:
          type: >-
            list of
            [tag](https://docs.aws.amazon.com/awscloudformation/latest/userguide/aws-properties-resource-tags.html)
          description: Property description not available\.
      required:
        - ContainerName
paths: {}
